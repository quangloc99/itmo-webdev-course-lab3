<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui"
      xmlns:custom="http://java.sun.com/jsf/composite/custom-components"
>
<h:head>
    <h:outputStylesheet name="css/app.css"/>
    <h:outputStylesheet name="css/primeflex.css"/>
</h:head>

<h:body>
    <ui:include src="__caption.xhtml" />
    <h:form>
        <p:commandButton action="#{app.toStartPageAction}" value="To start page"/>
    </h:form>

    <p:outputPanel id="input-animation-values">
        <style type="text/css">
            :root {
                --input-ani-r: #{app.editor.r eq null ? 0 : app.editor.r};
                --input-ani-x: #{app.editor.x eq null ? 0 : app.editor.x};
            }

            svg [id^=input-point-for] {
                opacity: 0;
            }
        </style>

        <c:forEach var="val" items="#{app.editor.generatedQueries}">
            <style>
                #input-point-for_#{val.y.toString().replace('.', '-')} {
                    opacity: 1;
                }
            </style>
        </c:forEach>
    </p:outputPanel>
    <h:panelGroup id="output-animation-values">
        <style>
            :root {
                --output-r: #{app.displayingQuery eq null ? 0 : app.displayingQuery.r};
                --output-x: #{app.displayingQuery eq null ? 0 : app.displayingQuery.x};
                --output-y: #{app.displayingQuery eq null ? 0 : app.displayingQuery.y};
                --output-fill-color: #{app.displayingQuery eq null ? "black" : app.displayingQuery.hit ? "green" : "red"};
            }
        </style>
    </h:panelGroup>

    <h2>Input form and interactive input</h2>
    <div class="p-grid">
        <div class="p-col">
            <h:form>

                <div class="p-grid input-field-container">

                    <div class="p-col"><p:outputLabel for="input-x" value="X:"/></div>
                    <div class="p-col">
                        <h:message id="input-x-message" for="input-x" styleClass="error-message"/>
                    </div>
                    <div class="p-col-8">
                        <p:inputText id="input-x" value="#{app.editor.x}"
                                     required="true"
                                     requiredMessage="field required"
                                     converterMessage="must be number between #{variantData.xRange.low} and #{variantData.xRange.high}"
                                     validatorMessage="must be number between #{variantData.xRange.low} and #{variantData.xRange.high}"
                        >
                            <f:converter converterId="ru.ifmo.se.s267880.pip.lab3.facesConverter.DoubleWithComma" />
<!--                            <f:converter converterId="javax.faces.Double"/>-->
                            <f:validateDoubleRange minimum="#{variantData.xRange.low}" maximum="#{variantData.xRange.high}"/>
                            <p:ajax event="keyup" update="input-x-message, input-animation-values" validateClient="true"/>
                        </p:inputText>
                    </div>
                </div>

                <div class="p-grid input-field-container">
                    <div class="p-col"><p:outputLabel value="Y:"/></div>
                    <div class="p-col"></div>
                    <div class="p-col-8">
                        <c:forEach var="val" items="#{variantData.yRange.listRepresentation}">
                            <p:selectBooleanCheckbox itemLabel="#{val}" value="#{app.editor.y[val]}">
                                <p:ajax update="input-animation-values"/>
                            </p:selectBooleanCheckbox>
                        </c:forEach>
                    </div>
                </div>

                <div class="p-grid input-field-container">
                    <div class="p-col"><p:outputLabel for="input-r" value="R: "/></div>
                    <div class="p-col">
                        <h:message id="input-r-message" for="input-r" styleClass="error-message"/>
                    </div>
                    <div class="p-col-8">
                        <p:selectOneMenu id="input-r" value="#{app.editor.r}" required="true" requiredMessage="field required">
                            <f:selectItem itemValue="#{null}" itemLabel="--select--" itemDisabled="#{app.editor.r ne null}" />
                            <c:forEach var="val" items="#{variantData.rRange.listRepresentation}">
                                <f:selectItem itemLabel="#{val}" itemValue="#{val}"/>
                            </c:forEach>

                            <p:ajax update="input-animation-values, input-r-message" />
                        </p:selectOneMenu>
                    </div>
                </div>

                <p:commandButton value="submit"
                                 actionListener="#{app.addGeneratedQueriesToDB}"
                                 update="input-x-message, input-r-message, queries-table, output-animation-values"/>

            </h:form>
        </div>

        <div class="p-col-fixed" style="text-align: center; width: 375px;">
            <custom:hitting-area-graph-template id="input-graph"
                                                r="var(--input-ani-r)"
                                                maxR="6"
                                                fill="red"
                                                width="350"
                                                height="350"
                                                addMouseEvent="true"
                                                relativeMouseX="#{app.interactiveInputX}"
                                                relativeMouseY="#{app.interactiveInputY}"
                                                action="#{app.acceptInteractiveInput}"
                                                update="output-animation-values, queries-table"
            >
                <c:forEach var="val" items="#{variantData.yRange.listRepresentation}">
                    <custom:hitting-area-point x="var(--input-ani-x)" y="#{val}"
                                               id="input-point-for_#{val.toString().replace('.', '-')}"/>
                </c:forEach>
            </custom:hitting-area-graph-template>
            Click the graph to add a new query.
        </div>
    </div>

    <h2>Queries result</h2>
    <p:commandButton value="Clear all queries" immediate="true"
                     actionListener="#{app.deleteAllQueries}"
                     update="queries-table, output-animation-values"/>
    <br/>
    <div class="p-grid">
        <div class="p-col">
            <p:dataTable id="queries-table"
                         value="#{app.allQueries}"
                         var="o"
                         rowStyleClass="#{app.displayingQuery.id eq o.id ? 'selected-row' : ''}"
                         stickyHeader="true"
            >
                <p:column headerText=" ">
                    <p:commandButton value="Show" update="queries-table, output-animation-values" immediate="true">
                        <f:setPropertyActionListener target="#{app.displayingQuery}" value="#{o}"/>
                    </p:commandButton>
                </p:column>
                <p:column headerText="x"> #{o.x} </p:column>
                <p:column headerText="y"> #{o.y} </p:column>
                <p:column headerText="r"> #{o.r} </p:column>
                <p:column headerText="Result"> #{o.hit} </p:column>
            </p:dataTable>
        </div>
        <div class="p-col-fixed" style="text-align: center; width: 375px;">
            <h:panelGroup id="output-graph-wrapper" layout="block">
                <custom:hitting-area-graph-template r="var(--output-r)"
                                                    maxR="6"
                                                    fill="var(--output-fill-color)"
                                                    width="350" height="350"
                >
                    <custom:hitting-area-point x="var(--output-x)" y="var(--output-y)" fill="blue"/>
                </custom:hitting-area-graph-template>
            </h:panelGroup>

        </div>
    </div>

    <p:sticky target="output-graph-wrapper" />

</h:body>

</html>
